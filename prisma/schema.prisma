generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type accountInfo {
  total_posts Int @default(0)
  total_reads Int @default(0)
}

type content {
  block   String[]
  time    DateTime
  version String
}

enum type {
  like
  reply
  comment
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  username       String?
  bio            String?
  image          String?
  youtube        String?
  instagram      String?
  facebook       String?
  github         String?
  website        String?
  emailVerified  DateTime?
  readIds        String[]  @db.ObjectId
  blogs          String[]  @db.ObjectId
  likedBlogIds   String[]  @db.ObjectId
  likedBlogs     Blog[]    @relation("likes", fields: [likedBlogIds], references: [id])
  readBlogIds    String[]  @db.ObjectId
  readBlogs      Blog[]    @relation("reads", fields: [readBlogIds], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  accounts     Account[]
  Blog         Blog[]
  Comment      Comment[]
  Notification Notification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Blog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  blog_id     String
  title       String
  banner      String
  description String
  content     content
  tags        String[]
  likes       String[]  @db.ObjectId
  likers      User[]    @relation("likes", fields: [likes], references: [id])
  readIds     String[]  @db.ObjectId
  reads       User[]    @relation("reads", fields: [readIds], references: [id])
  comments    Comment[]
  draft       Boolean   @default(false)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  Notification Notification[]
}

model Comment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  commentAuthor   User     @relation(fields: [commentAuthorId], references: [id])
  commentAuthorId String   @db.ObjectId
  comment         String
  parent          String   @db.ObjectId
  children        String[] @db.ObjectId
  isReply         Boolean  @default(false)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  Blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String @db.ObjectId
}

model Notification {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  type           type
  blogId         String  @db.ObjectId
  blog           Blog    @relation(fields: [blogId], references: [id])
  blogAuthorId   String  @db.ObjectId
  comment        String  @db.ObjectId
  reply          String  @db.ObjectId
  repliedComment String  @db.ObjectId
  seen           Boolean @default(false)
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @db.ObjectId

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
